
/* (c) Atinea Sp z o. o.
 *  Stamp: nianio lang
 */
#pragma once
#include "c_rt_lib.h"
#include <stdbool.h>
#include "ov.h"
#include "nast.h"
#include "ptd.h"
#include "own.h"
#include "array.h"
#include "hash.h"
#include "string.h"
#include "enum.h"
#include "c_std_lib.h"
#include "singleton.h"
#ifndef ANON_TYPE_DECLanon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE
#define ANON_TYPE_DECLanon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE
typedef struct anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE;
#endif
void ntokenizer0anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE0clean(anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE rec);
void ntokenizer0anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE0free(anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE *rec);

typedef struct ntokenizer0state_t0type ntokenizer0state_t0type;
void ntokenizer0state_t0type0clean(ntokenizer0state_t0type rec);
void ntokenizer0state_t0type0free(ntokenizer0state_t0type *rec);

typedef ImmT  ntokenizer0token_t0type;

#ifndef ANON_TYPE_DEFanon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE
#define ANON_TYPE_DEFanon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE
struct anon_type00RBanon_type00int0pos0anon_type00im0text0anon_type00im0next_token0anon_type00int0len0anon_type00refntokenizer0token_t0type0type0anon_type00im0place0anon_type00int0ln_pos0anon_type00im0last_comment0anon_type00int0ln_nr0anon_type00im0place_ws0anon_type00im0next_comment0RE {
INT  pos0field;
ImmT  text0field;
ImmT  next_token0field;
INT  len0field;
ntokenizer0token_t0type type0field;
ImmT  place0field;
INT  ln_pos0field;
ImmT  last_comment0field;
INT  ln_nr0field;
ImmT  place_ws0field;
ImmT  next_comment0field;
};
#endif
struct ntokenizer0state_t0type {
INT  pos0field;
ImmT  text0field;
ImmT  next_token0field;
INT  len0field;
ntokenizer0token_t0type type0field;
ImmT  place0field;
INT  ln_pos0field;
ImmT  last_comment0field;
INT  ln_nr0field;
ImmT  place_ws0field;
ImmT  next_comment0field;
};

ImmT  ntokenizer0state_t();
ImmT  ntokenizer0state_t0ptr(int _num, ImmT *_tab);
ImmT  ntokenizer0token_t();
ImmT  ntokenizer0token_t0ptr(int _num, ImmT *_tab);
ImmT  ntokenizer0init(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0pop_last_comment(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0get_next_comment(ntokenizer0state_t0type* ___ref___rec__0);
bool  ntokenizer0eat_token(ntokenizer0state_t0type* ___ref___rec__0,ImmT  ___nl__im__1);
INT  ntokenizer0get_line(ntokenizer0state_t0type* ___ref___rec__0);
INT  ntokenizer0get_column(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0get_place(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0get_place_ws(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0get_token(ntokenizer0state_t0type* ___ref___rec__0);
bool  ntokenizer0is_type(ntokenizer0state_t0type* ___ref___rec__0,ntokenizer0token_t0type ___nl__im__1);
bool  ntokenizer0next_is(ntokenizer0state_t0type* ___ref___rec__0,ImmT  ___nl__im__1);
ImmT  ntokenizer0eat_type(ntokenizer0state_t0type* ___ref___rec__0,ntokenizer0token_t0type ___nl__im__1);
bool  ntokenizer0is_text(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0eat_text(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0info(ntokenizer0state_t0type* ___ref___rec__0);
ImmT  ntokenizer0conv_to_im00state_t(ntokenizer0state_t0type* ___ref___rec__0);
