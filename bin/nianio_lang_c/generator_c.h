
/* (c) Atinea Sp z o. o.
 *  Stamp: nianio lang
 */
#pragma once
#include "c_rt_lib.h"
#include <stdbool.h>
#include "own.h"
#include "own_array.h"
#include "ptd.h"
#include "nlasm.h"
#include "string.h"
#include "array.h"
#include "hash.h"
#include "ov.h"
#include "singleton.h"
#include "nl.h"
#include "tct.h"
#include "generator_c_struct_dependence_sort.h"
#include "anon_naming.h"
#include "own_to_im_converter.h"
#ifndef ANON_TYPE_DECLanon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE
#define ANON_TYPE_DECLanon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE
typedef struct anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE;
#endif
void generator_c0anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE0clear(anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE rec);
void generator_c0anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE0free(anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE *rec);

typedef struct generator_c0const_t0type generator_c0const_t0type;
void generator_c0const_t0type0clear(generator_c0const_t0type rec);
void generator_c0const_t0type0free(generator_c0const_t0type *rec);

#ifndef ANON_TYPE_DECLanon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE
#define ANON_TYPE_DECLanon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE
typedef struct anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE;
#endif
void generator_c0anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE0clear(anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE rec);
void generator_c0anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE0free(anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE *rec);

#ifndef ANON_TYPE_DECLanon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE
#define ANON_TYPE_DECLanon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE
typedef struct anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE;
#endif
void generator_c0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0clear(anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE rec);
void generator_c0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0free(anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE *rec);

typedef ImmT  generator_c0out_t0type;

#ifndef ANON_TYPE_DECLanon_type00ownhashanon_type00bool
#define ANON_TYPE_DECLanon_type00ownhashanon_type00bool
typedef struct  {
own_to_im_function *own_to_im;
INT capacity;
INT size;
bool  *values;
ImmT  *keys;
} anon_type00ownhashanon_type00bool;
#endif
bool  *generator_c0anon_type00ownhashanon_type00bool0get_ptr(anon_type00ownhashanon_type00bool *hash, ImmT key, bool create_if_not_exist);
INT generator_c0anon_type00ownhashanon_type00bool0next_iter(anon_type00ownhashanon_type00bool *hash, INT last_iter);
void generator_c0anon_type00ownhashanon_type00bool0clear(anon_type00ownhashanon_type00bool hash);
void generator_c0anon_type00ownhashanon_type00bool0free(anon_type00ownhashanon_type00bool *hash);

#ifndef ANON_TYPE_DECLanon_type00ownarranon_type00im
#define ANON_TYPE_DECLanon_type00ownarranon_type00im
typedef struct  {
own_to_im_function *own_to_im;
INT capacity;
INT size;
ImmT  *value;
} anon_type00ownarranon_type00im;
#endif
void generator_c0anon_type00ownarranon_type00im0push(anon_type00ownarranon_type00im *arr, ImmT  arg);
ImmT  *generator_c0anon_type00ownarranon_type00im0get_ptr(anon_type00ownarranon_type00im *arr, INT index);
INT generator_c0anon_type00ownarranon_type00im0len(anon_type00ownarranon_type00im *arr);
void generator_c0anon_type00ownarranon_type00im0clear(anon_type00ownarranon_type00im arr);
void generator_c0anon_type00ownarranon_type00im0free(anon_type00ownarranon_type00im *arr);

typedef ImmT  generator_c0const_dict0type;

typedef ImmT  generator_c0global_const_t0type;

typedef ImmT  generator_c0module_out_t0type;

typedef struct generator_c0state_t0type generator_c0state_t0type;
void generator_c0state_t0type0clear(generator_c0state_t0type rec);
void generator_c0state_t0type0free(generator_c0state_t0type *rec);

typedef ImmT  generator_c0fun_args_t0type;

#ifndef ANON_TYPE_DEFanon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE
#define ANON_TYPE_DEFanon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE
struct anon_type00RBanon_type00ownarranon_type00im0arr0anon_type00im0hash0RE {
own_to_im_function *own_to_im;
anon_type00ownarranon_type00im arr0field;
ImmT  hash0field;
};
#endif
struct generator_c0const_t0type {
own_to_im_function *own_to_im;
anon_type00ownarranon_type00im arr0field;
ImmT  hash0field;
};

#ifndef ANON_TYPE_DEFanon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE
#define ANON_TYPE_DEFanon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE
struct anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE {
own_to_im_function *own_to_im;
generator_c0const_t0type int0field;
generator_c0const_t0type string0field;
generator_c0const_t0type singleton0field;
INT  dynamic_nr0field;
};
#endif
#ifndef ANON_TYPE_DEFanon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE
#define ANON_TYPE_DEFanon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE
struct anon_type00RBanon_type00im0defined_types0anon_type00ownhashanon_type00bool0additional_imports0anon_type00refnlasm0reg_type0type0ret_reg_type0anon_type00im0header0anon_type00refgenerator_c0global_const_t0type0global_string_const0anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE0const0anon_type00im0mod_name0anon_type00refgenerator_c0global_const_t0type0global_int_const0anon_type00im0ret0anon_type00refgenerator_c0fun_args_t0type0fun_args0RE {
own_to_im_function *own_to_im;
ImmT  defined_types0field;
anon_type00ownhashanon_type00bool additional_imports0field;
nlasm0reg_type0type ret_reg_type0field;
ImmT  header0field;
generator_c0global_const_t0type global_string_const0field;
anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE const0field;
ImmT  mod_name0field;
generator_c0global_const_t0type global_int_const0field;
ImmT  ret0field;
generator_c0fun_args_t0type fun_args0field;
};
#endif
struct generator_c0state_t0type {
own_to_im_function *own_to_im;
ImmT  defined_types0field;
anon_type00ownhashanon_type00bool additional_imports0field;
nlasm0reg_type0type ret_reg_type0field;
ImmT  header0field;
generator_c0global_const_t0type global_string_const0field;
anon_type00RBanon_type00refgenerator_c0const_t0type0int0anon_type00refgenerator_c0const_t0type0string0anon_type00refgenerator_c0const_t0type0singleton0anon_type00int0dynamic_nr0RE const0field;
ImmT  mod_name0field;
generator_c0global_const_t0type global_int_const0field;
ImmT  ret0field;
generator_c0fun_args_t0type fun_args0field;
};

ImmT  generator_c0const_dict();
ImmT  generator_c0const_dict0ptr(int _num, ImmT *_tab);
ImmT  generator_c0fun_args_t();
ImmT  generator_c0fun_args_t0ptr(int _num, ImmT *_tab);
ImmT  generator_c0const_t();
ImmT  generator_c0const_t0ptr(int _num, ImmT *_tab);
ImmT  generator_c0global_const_t();
ImmT  generator_c0global_const_t0ptr(int _num, ImmT *_tab);
ImmT  generator_c0state_t();
ImmT  generator_c0state_t0ptr(int _num, ImmT *_tab);
ImmT  generator_c0module_out_t();
ImmT  generator_c0module_out_t0ptr(int _num, ImmT *_tab);
ImmT  generator_c0out_t();
ImmT  generator_c0out_t0ptr(int _num, ImmT *_tab);
generator_c0out_t0type generator_c0generate(ImmT  ___nl__im__0,generator_c0state_t0type* ___ref___rec__1);
ImmT  generator_c0clear_module_from_state(generator_c0state_t0type* ___ref___rec__0,ImmT  ___nl__im__1);
ImmT  generator_c0conv_to_im00const_t(generator_c0const_t0type* ___ref___rec__0);
ImmT  generator_c0conv_to_im00state_t(generator_c0state_t0type* ___ref___rec__0);
